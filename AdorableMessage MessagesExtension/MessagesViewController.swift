//
//  MessagesViewController.swift
//  AdorableMessage MessagesExtension
//
//  Created by Elias Paulino on 26/10/18.
//  Copyright Â© 2018 Elias Paulino. All rights reserved.
//

import UIKit
import Messages

class MessagesViewController: MSMessagesAppViewController {
    
    @IBOutlet weak var stickersCollectionView: UICollectionView!
    
    private var containerAvatars: [AvatarContainer]? = FileManager.default.getAvatars()
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        stickersCollectionView.register(UINib.init(nibName: "UIAvatarCollectionViewCell", bundle: nil), forCellWithReuseIdentifier: "avatarCell")
        
        stickersCollectionView.dataSource = self
        stickersCollectionView.delegate = self
        stickersCollectionView.allowsMultipleSelection = true
        
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }

}

extension MessagesViewController: UICollectionViewDelegateFlowLayout, UICollectionViewDataSource {
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return self.containerAvatars?.count ?? 0
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "avatarCell", for: indexPath)
        
        if let avatarCell = cell as? UIAvatarCollectionViewCell,  let avatar = containerAvatars?[indexPath.row].avatar, let avatarName = avatar.name {
            
            let image = FileManager.default.getAvatar(withName: avatarName)
            
            avatarCell.setup(name: avatarName, image: image, isFaved: avatar.isFave, isShaking: false)
        }
        
        return cell
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        
        var cellSize: CGSize?
        
        let width = collectionView.frame.size.width/3 - 10
        let height = 1.35 * width
        
        cellSize = CGSize.init(width: width, height: height)
        
        if let size = cellSize, size.width > 180 {
            let width = collectionView.frame.size.width/5 - 10
            let height = 1.35 * width
            
            cellSize = CGSize.init(width: width, height: height)
        }
        
        return cellSize!
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        guard let conversetion = self.activeConversation else {
            return
        }
        
        guard let avatarContainer = self.containerAvatars?[indexPath.row] else {
            return
        }
        
        let avatar = avatarContainer.avatar
        
        guard let avatarName = avatar.name, let image = FileManager.default.getAvatar(withName: avatarName) else {
            return
        }
        
        guard let message = composeMessage(withImage: image, andName: avatarName, session: conversetion.selectedMessage?.session) else {
            return
        }
        
        conversetion.insert(message) { (error) in
            print("error")
        }
    }
    
    func composeMessage(withImage image: UIImage, andName name: String = "", session: MSSession? = nil) -> MSMessage? {

        let layout = MSMessageTemplateLayout()
        
        layout.image = image
        layout.caption = name
        
        let message = MSMessage(session: session ?? MSSession())
        
        message.layout = layout
        
        return message
    }
}
